- name: Install wrapper script
  template:
    src: wrapper.sh
    dest: "{{ eddyetc_bin_path }}"
    mode: +x

- name: Create eddyetc user
  user:
    name: "{{ eddyetc_user }}"
    state: present
  register: _user

- name: Create a documentation file
  copy:
    dest: "{{ _user.home }}/README"
    content: |
      This is the home of the eddyetc docker image.
      Invoke it using the {{ eddyetc_bin_path }} wrapper.

- name: Create build directories
  file:
    path: "{{ _user.home }}/build"
    state: directory
  register: _build

- name: Install build requirements
  template:
    src: "{{ item }}"
    dest: "{{ _build.path }}/{{ item }}"
  loop:
      - Dockerfile
      - entrypoint.sh
      - "{{ eddyetc_r_name }}"
  register: _templates

- name: Copy build requirements
  copy:
    src: processing_setup
    dest: "{{ _build.path }}/"
  register: _copy

- name: Build the eddyetc image
  docker_image:
    path: "{{ _build.path }}"
    name: "{{ eddyetc_image }}"
    state: present
    force: "{{ _templates.changed or _copy.changed }} "

# We're mostly checking that the wrapper was installed in the right place and
# made executable. So we just run it without arguments and expect it to fail.
- name: Test the eddyetc host wrapper
  command: >-
    {{ eddyetc_bin_path }}
  register: r
  failed_when: "r.rc != 1 or not r.stderr.endswith('input.zip output.zip')"
  changed_when: false

# This will be a minimum test to ensure that the image was compiled and that the
# entrypoint is executable and free from syntax errors.
- name: Test the eddyetc image entrypoint
  command: >-
    docker run {{ eddyetc_image }}
  register: r
  failed_when: "r.rc != 1 or not r.stderr.endswith('name_of_output_file.zip')"
  changed_when: false
